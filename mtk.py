# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MapToolKit
                                 A QGIS plugin
 lesteryan map tool kit
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-04-26
        git sha              : $Format:%H$
        copyright            : (C) 2023 by lesteryan
        email                : cgmsyx@163.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import *
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtWidgets import *
from PyQt5.QtWidgets import *
from qgis.core import *
from qgis.gui import *
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .mtk_dialog import MapToolKitDialog
import os.path
import time
import random
from shapely import wkt, wkb
import json

from .core.NdsUtil import NdsUtil
from .core.CoordTrans import CoordTrans

def handleLayerExtentChanged(layer = None):
    QgsMessageLog.logMessage('extend changed')


class MapToolKit:
    """QGIS Plugin Implementation."""

    def __init__(self, iface : QgisInterface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        self.canvas = iface.mapCanvas()
        self.task_manager = QgsApplication.taskManager()
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'MapToolKit_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&MapToolKit')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('MapToolKit', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/mtk/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&MapToolKit'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = MapToolKitDialog()
            self.dlg.button_draw_nds_wgs84.clicked.connect(self.button_draw_nds_wgs84_clicked)
            self.dlg.button_draw_nds_gcj02.clicked.connect(self.button_draw_nds_gcj02_clicked)
            self.dlg.button_get_bound_tile.clicked.connect(self.button_get_bound_tile_clicked)

            self.dlg.button_draw_wkt.clicked.connect(self.button_draw_wkt_clicked)
            self.dlg.button_draw_wkb.clicked.connect(self.button_draw_wkb_clicked)

            self.dlg.button_draw_geojson.clicked.connect(self.button_draw_geojson_clicked)

            self.dlg.button_coordstrans_gcj02_to_wgs84.clicked.connect(self.button_coordtransform_gcj02towgs84_clicked)
            self.dlg.button_coordstrans_wgs84_to_gcj02.clicked.connect(self.button_coordtransform_wgs84togcj02_clicked)

            self.dlg.button_draw_wgs84_point.clicked.connect(self.button_draw_wgs84_point_clicked)
            self.dlg.button_draw_wgs84_line.clicked.connect(self.button_draw_wgs84_line_clicked)
            self.dlg.button_draw_gcj02_point.clicked.connect(self.button_draw_gcj02_point_clicked)
            self.dlg.button_draw_gcj02_line.clicked.connect(self.button_draw_gcj02_line_clicked)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            pass
            
    def saveFeatures(self, layer : QgsVectorLayer, features : QgsFeature):
        # feature_request = QgsFeatureRequest()
        # feature_itr : QgsFeatureIterator =  layer.getFeatures(feature_request)
        # ids = [i.id() for i in feature_itr]
        # QgsMessageLog.logMessage('ids = ' + ','.join(','))
        # if len(ids) != 0:
        #     # layer.startEditing()
        #     # layer.dataProvider().deleteFeatures([1])
        #     # layer.commitChanges()
        #     QgsMessageLog.logMessage(f'feature delete success')
        # else:
        #     QgsMessageLog.logMessage(f'empty, skip delete')
        
        layer.dataProvider().addFeatures([features])
        layer.updateExtents()
        layer.reload()
        self.canvas.refresh()

    def completed(self, exception = None, result=None):
        QgsMessageLog.logMessage('Task was finished')

    def mytask(self, task = None, arg1 = None):
        QgsMessageLog.logMessage(f'task run ... {arg1}')
        fields = QgsFields()
        fields.append(QgsField("name", QVariant.String))

        polygon_layer = QgsVectorLayer('Polygon?crs=epsg:4326', 'Polygon', 'memory')
        polygon_layer.dataProvider().addAttributes(fields)
        polygon_layer.updateFields()

        linestring_layer = QgsVectorLayer('LineString?crs=epsg:4326', 'Line', 'memory')
        linestring_layer.dataProvider().addAttributes(fields)
        linestring_layer.updateFields()

        polygon_layer.setAutoRefreshInterval(5)
        polygon_layer.setAutoRefreshEnabled(True)
        linestring_layer.setAutoRefreshInterval(5)
        linestring_layer.setAutoRefreshEnabled(True)

        QgsProject.instance().addMapLayer(polygon_layer)
        QgsProject.instance().addMapLayer(linestring_layer)

        layer_settings = QgsPalLayerSettings()
        text_format = QgsTextFormat()
        text_format.setFont(QFont("宋体", 20))
        text_format.setColor(QColor("black"))
        layer_settings.setFormat(text_format)
        layer_settings.fieldName = "name"
        layer_settings.placement = QgsPalLayerSettings.Line
        layer_settings.enabled = True
        labels = QgsVectorLayerSimpleLabeling(layer_settings)

        # symbol = QgsSymbol.defaultSymbol(layer.geometryType())
        # symbol.setColor(QColor('red'))

        polygon_layer.setLabeling(labels)
        polygon_layer.setLabelsEnabled(True)


        linestring_layer.setLabeling(labels)
        linestring_layer.setLabelsEnabled(True)
        
        counter = 0
        step = 0.01

        base_x, base_y = 116.398231, 39.906627

        while True:
            polygon = QgsGeometry.fromWkt(f'POLYGON(({base_x + counter} {base_y + counter} ,{base_x + counter}  {base_y + counter + 1 * step},{base_x + counter + 1 * step} {base_y + counter + 1 * step},{base_x + counter + 1 * step} {base_y + counter},{base_x + counter} {base_y + counter}))')
            if not polygon:
                QgsMessageLog.logMessage(f'invalid geomtry')
                return 
            
            # text_format.setText(str(counter))
            
            polygon_feature = QgsFeature()
            polygon_feature.setFields(fields)
            polygon_feature.setId(counter)
            polygon_feature.setGeometry(polygon)
            polygon_feature.setAttribute('name', str(int(counter * 100)))
            # polygon_feature.setSymbol(symbol)

            polygon_layer.dataProvider().addFeature(polygon_feature)
            polygon_layer.updateExtents()

            linestring = QgsGeometry.fromWkt(f'LINESTRING({base_x + counter} {base_y + counter},{base_x + counter} {base_y + counter + 2 * step},{base_x + counter + 2 * step} {base_y + counter},{base_x + counter} {base_y + counter})')
            if not linestring:
                QgsMessageLog.logMessage(f'invalid geomtry')
                return 
            
            linestring_feature = QgsFeature()
            linestring_feature.setFields(fields)
            linestring_feature.setId(counter)
            linestring_feature.setGeometry(linestring)
            linestring_feature.setAttribute('name', str(int(counter * 100)))

            linestring_layer.dataProvider().addFeature(linestring_feature)
            linestring_layer.updateExtents()

            # self.iface.mapCanvas().setExtent(linestring_layer.extent())

            time.sleep(0.5)
            counter = counter + step

            if counter > step * 20:
                break

        QgsMessageLog.logMessage("debug2 ...")
        # 获取当前视口的中心点坐标和缩放等级
        canvas = self.iface.mapCanvas()
        center = canvas.center()
        scale = canvas.scale()
        QgsMessageLog.logMessage("debug3 ...")
        # 获取当前选中的图层
        layer = self.iface.activeLayer()

        # 获取图层的坐标参考系
        crs = layer.crs()

        QgsMessageLog.logMessage("CRS: " + crs.authid())
        QgsMessageLog.logMessage("CRS2: " + canvas.mapSettings().destinationCrs().authid())
        
        QgsMessageLog.logMessage(f'Center: {center.x()},{center.y()}')

        # 获取图层的范围（extent）
        extent = layer.extent()
        # 将extent转换为当前项目的坐标参考系
        transform = QgsCoordinateTransform(layer.crs(), canvas.mapSettings().destinationCrs())
        projected_extent = transform.transform(extent)
        # 输出结果
        
        QgsMessageLog.logMessage(f'Scale: {scale}')
        
        QgsMessageLog.logMessage(f'Extent: {extent.toString()}')
        QgsMessageLog.logMessage(f'Extent: {projected_extent.toString()}')
        return True

    def stopped(self, task):
        QgsMessageLog.logMessage('Task was canceled')

    def draw_features(self, layer_name: str, features: list[QgsFeature]):
        pass

    def draw_nds_tile(self, layer_name: str, tileid_str: str, coords_sys: int):
        if(len(tileid_str) == 0):
            self.iface.messageBar().pushMessage("Error", "invalid nds string", level=Qgis.Critical)
            return 

        fields = QgsFields()
        fields.append(QgsField("tile_id", QVariant.Int))
        fields.append(QgsField("level", QVariant.Int))

        nds_layer = QgsVectorLayer('Polygon?crs=epsg:4326', layer_name, 'memory')
        symbol = QgsFillSymbol.createSimple({'color': '#00000000', 'style': 'solid', 'outline_color': 'red', 'stroke_width': '1'})
        nds_layer.renderer().setSymbol(symbol)
        
        nds_layer.dataProvider().addAttributes(fields)
        nds_layer.updateFields()

        QgsProject.instance().addMapLayer(nds_layer)

        layer_settings = QgsPalLayerSettings()
        text_format = QgsTextFormat()
        text_format.setColor(QColor("red"))
        layer_settings.setFormat(text_format)
        layer_settings.fieldName = "tile_id"
        layer_settings.placement = QgsPalLayerSettings.AroundPoint
        layer_settings.enabled = True
        labels = QgsVectorLayerSimpleLabeling(layer_settings)

        nds_layer.setLabeling(labels)
        nds_layer.setLabelsEnabled(True)

        tiles = list(map(lambda x : int(x.strip()), tileid_str.strip().split(',')))
        for tileid in tiles:
            level = NdsUtil.get_tile_level(tileid)
            p = NdsUtil.get_tile_polygon_of_deg(tileid)

            if coords_sys == 0:
                points = list(map(lambda l : QgsPointXY(l[0], l[1]), p))
            else:
                points = map(lambda l : CoordTrans.wgs84_to_gcj02(l[0], l[1]), p)
                points = list(map(lambda l : QgsPointXY(l[0], l[1]), points))

            
            polygon = QgsGeometry.fromPolygonXY([points])

            feature = QgsFeature()
            feature.setFields(fields)
            feature.setId(tileid)
            feature.setGeometry(polygon)
            feature.setAttribute('tile_id', tileid)
            feature.setAttribute('level', level)
            # polygon_feature.setSymbol(symbol)

            nds_layer.dataProvider().addFeature(feature)
            nds_layer.updateExtents()

    def button_draw_nds_wgs84_clicked(self):
        self.draw_nds_tile(self.dlg.edit_tile_layer_name.text(), self.dlg.text_tile_content.toPlainText(), 0)

    def button_draw_nds_gcj02_clicked(self):
        self.draw_nds_tile(self.dlg.edit_tile_layer_name.text(), self.dlg.text_tile_content.toPlainText(), 1)

    def button_get_bound_tile_clicked(self):
        extent = self.iface.mapCanvas().extent()
        crs = self.iface.activeLayer().crs()
        if(crs.authid() != 'EPSG:4326'):
            transform = QgsCoordinateTransform(crs, QgsCoordinateReferenceSystem('EPSG:4326'), QgsProject.instance())
            extent = transform.transform(extent)
   
        x1, y1, x2, y2 = extent.xMinimum(), extent.yMinimum(), extent.xMaximum(), extent.yMaximum()
        level = self.dlg.spin_tile_level.value()
        QgsMessageLog.logMessage("xy1: " + f'{x1} {y1} {x2} {y2} {level}')  
        tile_ids = NdsUtil.get_bound_tileids(x1, y1, x2, y2, level)
        tile_ids_str = ','.join(list(map(str, tile_ids)))
        self.dlg.text_tile_content.setPlainText(tile_ids_str)

    def draw_geometry(self, layer_name: str, geometry: QgsGeometry):
        crs = 'EPSG:4326'
        geom_type = self.wkbType2String(geometry.type())
        uri = '{}?crs={}'.format(geom_type, crs)

        QgsMessageLog.logMessage("url: " + uri)  
        QgsMessageLog.logMessage("geom: " + geometry.asWkt())  

        layer = QgsVectorLayer(uri, layer_name, 'memory')
        pr = layer.dataProvider()

        feature = QgsFeature()
        feature.setGeometry(geometry)
        pr.addFeature(feature)
        layer.updateExtents()
        QgsProject.instance().addMapLayer(layer)

    def wkbType2String(self, t: QgsWkbTypes.GeometryType):
        if t == QgsWkbTypes.GeometryType.PointGeometry:
            return 'Point'
        elif t == QgsWkbTypes.GeometryType.LineGeometry:
            return 'LineString'
        elif t == QgsWkbTypes.GeometryType.PolygonGeometry:
            return 'Polygon'
        return None

    def button_draw_wkt_clicked(self):
        # QgsMessageLog.logMessage("txt: " + uri)  
        geom = QgsGeometry.fromWkt(self.dlg.text_wkt_content.toPlainText())
        layer_name = self.dlg.edit_wkt_layer_name.text()
        self.draw_geometry(layer_name, geom)

    def button_draw_wkb_clicked(self):
        geom = QgsGeometry.fromWkb(self.dlg.text_wkt_content.toPlainText())
        layer_name = self.dlg.edit_wkt_layer_name.text()
        self.draw_geometry(layer_name, geom)

    def button_draw_geojson_clicked(self):
        features = QgsJsonUtils.stringToFeatureList(self.dlg.text_geojson_content.toPlainText())
        layer_name = self.dlg.edit_geojson_layer_name.text()

        crs = 'EPSG:4326'
        geom_type = self.wkbType2String(features[0].geometry().type())
        uri = '{}?crs={}'.format(geom_type, crs)
        layer = QgsVectorLayer(uri, layer_name, 'memory')
        pr = layer.dataProvider()

        # 添加字段和特征到 Layer 中
        for feature in features:
            pr.addFeatures([feature])

        layer.updateExtents()
        QgsProject.instance().addMapLayer(layer)

    # mode 0 point 1 line
    # coord_sys 0 wgs84 1 gcj02
    def draw(self, layer_name: str, coords_str: str, mode: int, coords_sys: int):
        coords = list(map(lambda x : float(x.strip()), coords_str.strip().split(',')))
        points = []
        for i in range(0, len(coords), 2):
            x, y = coords[i + 0], coords[i + 1]
            if coords_sys == 1:
                x, y = CoordTrans.gcj02_to_wgs84(x, y)
            points.append(QgsPointXY(x, y))

        if mode == 0:
            geometry = QgsGeometry.fromMultiPointXY(points)
        elif mode == 1:
            geometry = QgsGeometry.fromPolylineXY(points)

        if geometry is not None and not geometry.isEmpty():
            self.draw_geometry(layer_name, geometry)  

    def button_draw_wgs84_point_clicked(self):
        layer_name = self.dlg.edit_simple_layer_name.text()
        coords = self.dlg.text_simple_content.toPlainText()
        self.draw(layer_name, coords, 0, 0)

    def button_draw_wgs84_line_clicked(self):
        layer_name = self.dlg.edit_simple_layer_name.text()
        coords = self.dlg.text_simple_content.toPlainText()
        self.draw(layer_name, coords, 1, 0)

    def button_draw_gcj02_point_clicked(self):
        layer_name = self.dlg.edit_simple_layer_name.text()
        coords = self.dlg.text_simple_content.toPlainText()
        self.draw(layer_name, coords, 0, 1)

    def button_draw_gcj02_line_clicked(self):
        layer_name = self.dlg.edit_simple_layer_name.text()
        coords = self.dlg.text_simple_content.toPlainText()
        self.draw(layer_name, coords, 1, 1)

    def button_coordtransform_wgs84togcj02_clicked(self):
        coords_str = self.dlg.text_coords_wgs84.toPlainText()
        coords = list(map(lambda x : float(x.strip()), coords_str.strip().split(',')))
        result = []
        for i in range(0, len(coords), 2):
            x, y = coords[i + 0], coords[i + 1]
            x, y = CoordTrans.wgs84_to_gcj02(x, y)
            result.append(x)
            result.append(y)
        
        result_str = ','.join(list(map(str, result)))
        self.dlg.text_coords_gcj02.setPlainText(result_str)


    def button_coordtransform_gcj02towgs84_clicked(self):
        coords_str = self.dlg.text_coords_gcj02.toPlainText()
        coords = list(map(lambda x : float(x.strip()), coords_str.strip().split(',')))
        result = []
        for i in range(0, len(coords), 2):
            x, y = coords[i + 0], coords[i + 1]
            x, y = CoordTrans.gcj02_to_wgs84(x, y)
            result.append(x)
            result.append(y)

        result_str = ','.join(list(map(str, result)))
        self.dlg.text_coords_wgs84.setPlainText(result_str)


    def click_test(self):

        try:
            QgsMessageLog.logMessage('click')
            task1 : QgsTask = QgsTask.fromFunction('Waste cpu 1', self.mytask, on_finished=self.completed, arg1=3)
            self.task_manager.addTask(task1)

            self.iface.mapCanvas().extentsChanged.connect(handleLayerExtentChanged)
        except Exception:
            QgsMessageLog.logMessage('aoh....')